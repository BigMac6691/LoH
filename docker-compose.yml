services:
  db:
    image: postgres:16
    restart: unless-stopped
    env_file: ./.env
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    volumes:
      - pgdata:/var/lib/postgresql/data
    # Expose only if you need host access temporarily:
    # ports:
    #   - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER} -d ${PGDATABASE}"]
      interval: 5s
      timeout: 3s
      retries: 20

  api:
    build:
      context: .                # <-- repo root
      dockerfile: backend/Dockerfile
    env_file: ./.env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${API_PORT:-3000}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "${API_PORT:-3000}:3000"
    working_dir: /app/backend   # <-- run from backend folder
    volumes:
      # live-edit backend & shared during dev:
      - ./backend:/app/backend:rw,delegated
      - ./packages/shared:/app/packages/shared:rw,delegated
      # prevent node_modules from being shadowed by bind mounts:
      - /app/node_modules
      - /app/backend/node_modules
    command: ["node", "server.js"]   # or ["npm","run","dev"] if you prefer
    restart: unless-stopped

volumes:
  pgdata:
